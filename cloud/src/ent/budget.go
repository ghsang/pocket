// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"pocket/ent/budget"
	"pocket/ent/schema"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Budget is the model entity for the Budget schema.
type Budget struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Value holds the value of the "value" field.
	Value        []schema.BudgetPerCategory `json:"value,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Budget) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case budget.FieldValue:
			values[i] = new([]byte)
		case budget.FieldID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Budget fields.
func (b *Budget) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case budget.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				b.ID = value.String
			}
		case budget.FieldValue:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &b.Value); err != nil {
					return fmt.Errorf("unmarshal field value: %w", err)
				}
			}
		default:
			b.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the Budget.
// This includes values selected through modifiers, order, etc.
func (b *Budget) GetValue(name string) (ent.Value, error) {
	return b.selectValues.Get(name)
}

// Update returns a builder for updating this Budget.
// Note that you need to call Budget.Unwrap() before calling this method if this Budget
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Budget) Update() *BudgetUpdateOne {
	return NewBudgetClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Budget entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Budget) Unwrap() *Budget {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Budget is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Budget) String() string {
	var builder strings.Builder
	builder.WriteString("Budget(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("value=")
	builder.WriteString(fmt.Sprintf("%v", b.Value))
	builder.WriteByte(')')
	return builder.String()
}

// Budgets is a parsable slice of Budget.
type Budgets []*Budget
