---
import "../../index.css";
import Labels from "components/labels.astro";
import { css } from "css";
import { getTransactionById } from "lib/server";
import { getSession } from "auth-astro/server";
import { nanoid } from "nanoid";

const session = await getSession(Astro.request);

if (!session || !session.user?.name) {
	return Astro.redirect("/login");
}

const { id } = Astro.params;

const transaction = await getTransactionById({
	traceId: nanoid(),
	parentSpanId: "/pages/transactions/[id].astro",
	arguments_: { id: id! },
});
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<meta name="generator" content={Astro.generator} />
		<title>가계부</title>
	</head>
	<body>
		<detail-form-handler>
			<form
				data-id={id}
				class={css({
					height: "100vh",
					display: "flex",
					flexDirection: "column",
					justifyContent: "center",
				})}
			>
				{
					transaction && (
						<Labels transaction={transaction} user={session.user.name} />
					)
				}
				<div
					class={css({
						marginTop: "2rem",
						display: "flex",
						justifyContent: "space-between",
					})}
				>
					<button
						id="delete-transaction-button"
						class={"delete-button " +
							css({
								width: "100%",
								marginX: "0.3rem",
								backgroundColor: "red.600",
								color: "white",
								border: "none",
								padding: "0.5rem",
								cursor: "pointer",
								rounded: "md",
								_active: {
									scale: 0.98,
								},
							})}
					>
						삭제
					</button>
					<button
						class={"modify-button " +
							css({
								width: "100%",
								marginX: "0.3rem",
								backgroundColor: "teal.600",
								color: "white",
								border: "none",
								padding: "0.5rem",
								cursor: "pointer",
								rounded: "md",
								_active: {
									scale: 0.98,
								},
							})}
					>
						수정
					</button>
				</div>
			</form>
		</detail-form-handler>
	</body>
</html>

<script>
	import { navigate } from "astro:transitions/client";
	import { nanoid } from "nanoid";

	class DetailFormHandler extends HTMLElement {
		constructor() {
			super();

			const form = this.querySelector("form") as HTMLFormElement;

			const deleteButton = this.querySelector(
				".delete-button",
			) as HTMLButtonElement;

			const modifyButton = this.querySelector(
				".modify-button",
			) as HTMLButtonElement;

			function getFormData() {
				const formData = new FormData(form);
				const temporary = Object.fromEntries(formData.entries());
			return { ...temporary, amount: Number(temporary.amount) };
			}

			deleteButton.addEventListener("click", async (event) => {
				event.preventDefault();

				await fetch(`/api/transactions/${form.dataset.id}.json`, {
					method: "DELETE",
					headers: {
						"Content-Type": "application/json",
						"X-B3-TraceId": nanoid(),
						"X-B3-ParentSpanId": "/pages/transactions/[id].astro",
					},
				});

				navigate("/");
			});

			modifyButton.addEventListener("click", async (event) => {
				event.preventDefault();

				const data = getFormData();

				await fetch(`/api/transactions/${form.dataset.id}.json`, {
					method: "PATCH",
					headers: {
						"Content-Type": "application/json",
						"X-B3-TraceId": nanoid(),
						"X-B3-ParentSpanId": "/pages/transactions/[id].astro",
					},
					body: JSON.stringify(data),
				});

				setTimeout(() => {
					navigate("/");
				}, 100);
			});

			const body = document.querySelector("body") as HTMLBodyElement;

			let startX = 0;

			body.addEventListener("touchstart", (event) => {
				if (event.touches[0] === undefined) return;

				startX = event.touches[0].clientX;
			});

			body.addEventListener(
				"touchmove",
				(event) => {
					event.preventDefault();
				},
				{ passive: false },
			);

			body.addEventListener("touchend", (event) => {
				if (event.changedTouches[0] === undefined) return;

				const endX = event.changedTouches[0].clientX;

				if (startX + 50 < endX) {
					history.back();
				}
			});
		}
	}

	customElements.define("detail-form-handler", DetailFormHandler);
</script>
