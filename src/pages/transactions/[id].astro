---
import "../../index.css";
import ExpenseForm from "./_expense-form.astro";
import BudgetForm from "./_budget-form.astro";
import { getTransactionById } from "lib/server";
import { getSession } from "auth-astro/server";
import { nanoid } from "nanoid";

interface Props {
	id: string;
}

const session = await getSession(Astro.request);

if (!session || !session.user?.name) {
	return Astro.redirect("/login");
}

const { id } = Astro.params;

if (!id) {
	throw new Error("Transaction ID is required");
}

const transaction = await getTransactionById({
	traceId: nanoid(),
	parentSpanId: "/pages/transactions/[id].astro",
	arguments_: { id: id! },
});

if (!transaction) {
	throw new Error("Transaction not found");
}
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<meta name="generator" content={Astro.generator} />
		<title>가계부</title>
	</head>
	<body>
		<detail-form-handler>
			{transaction.isExpense ? (
				<ExpenseForm 
					id={id} 
					user={session.user.name} 
					transaction={transaction} 
				/>
			) : (
				<BudgetForm 
					id={id} 
					transaction={transaction} 
				/>
			)}
		</detail-form-handler>
	</body>
</html>

<script>
	import { navigate } from "astro:transitions/client";
	import { nanoid } from "nanoid";
	import { $ } from "lib/client";

	class DetailFormHandler extends HTMLElement {
		constructor() {
			super();

			const form = $<HTMLFormElement>(this, "form");

			const deleteButton = $<HTMLButtonElement>(
				this,
				".delete-button",
			);

			const modifyButton = $<HTMLButtonElement>(
				this,
				".modify-button",
			);

			function getFormData() {
				const formData = new FormData(form);
				const temporary = Object.fromEntries(formData.entries());
			return { ...temporary, amount: Number(temporary.amount) };
			}

			deleteButton.addEventListener("click", async (event) => {
				event.preventDefault();

				await fetch(`/api/transactions/${form.dataset.id}.json`, {
					method: "DELETE",
					headers: {
						"Content-Type": "application/json",
						"X-B3-TraceId": nanoid(),
						"X-B3-ParentSpanId": "/pages/transactions/[id].astro",
					},
				});

				navigate("/");
			});

			modifyButton.addEventListener("click", async (event) => {
				event.preventDefault();

				const data = getFormData();

				await fetch(`/api/transactions/${form.dataset.id}.json`, {
					method: "PATCH",
					headers: {
						"Content-Type": "application/json",
						"X-B3-TraceId": nanoid(),
						"X-B3-ParentSpanId": "/pages/transactions/[id].astro",
					},
					body: JSON.stringify(data),
				});

				setTimeout(() => {
					navigate("/");
				}, 100);
			});

			const body = document.querySelector("body") as HTMLBodyElement;

			let startX = 0;

			body.addEventListener("touchstart", (event) => {
				if (event.touches[0] === undefined) return;

				startX = event.touches[0].clientX;
			});

			body.addEventListener(
				"touchmove",
				(event) => {
					event.preventDefault();
				},
				{ passive: false },
			);

			body.addEventListener("touchend", (event) => {
				if (event.changedTouches[0] === undefined) return;

				const endX = event.changedTouches[0].clientX;

				if (startX + 50 < endX) {
					history.back();
				}
			});
		}
	}

	customElements.define("detail-form-handler", DetailFormHandler);
</script>
