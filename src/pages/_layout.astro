---
import "../index.css";
import { css } from "css";
import { ViewTransitions } from "astro:transitions";
import { pwaInfo } from "virtual:pwa-info";

const active = (href: string) => Astro.url.pathname === href;

const navigation = [
  { href: "/", label: "일지" },
  { href: "/budget", label: "예산" },
  { href: "/payment-methods", label: "결제수단" },
];
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="generator" content={Astro.generator} />
    <meta name="theme-color" content="#ffffff" />
    <title>가계부</title>
    {pwaInfo && <Fragment set:html={pwaInfo.webManifest.linkTag} />}
    <script src="/src/pwa.ts"></script>
    <ViewTransitions />
  </head>
  <body>
    <header
      class={css({
        height: "10vh",
        display: "fixed",
        top: 0,
      })}
    >
      <nav
        class={css({
          display: "flex",
          justifyContent: "space-around",
          alignItems: "center",
          height: "100%",
          fontSize: "xl",
        })}
      >
        {
          navigation.map(({ href, label }) => (
            <a
              href={href}
              class={css({
                borderColor: active(href) ? "teal.500" : "",
                borderBottomWidth: active(href) ? "4px" : "0",
                marginTop: active(href) ? "2px" : "0",
              })}
            >
              {label}
            </a>
          ))
        }
      </nav>
    </header>
    <main transition:animate="slide">
      <swipe-navigation></swipe-navigation>
      <slot />
    </main>
    <script>
      import { navigate } from "astro:transitions/client";

      class SwipeNavigation extends HTMLElement {
        constructor() {
          super();

          const hrefs = ["/", "/budget", "/payment-methods"];

          function swipeRight() {
            if (window.location.pathname === hrefs[0]) return;

            const index = hrefs.indexOf(window.location.pathname);

            navigate(hrefs[index - 1]!);
          }

          function swipeLeft() {
            if (window.location.pathname === hrefs[hrefs.length - 1]) return;

            const index = hrefs.indexOf(window.location.pathname);

            navigate(hrefs[index + 1]!);
          }

          const body = document.querySelector("body") as HTMLBodyElement;

          let startX = 0;

          body.addEventListener("touchstart", (e) => {
            if (e.touches[0] === undefined) return;

            startX = e.touches[0].clientX;
          });

          body.addEventListener("touchend", (e) => {
            if (e.changedTouches[0] === undefined) return;

            const endX = e.changedTouches[0].clientX;

            if (startX + 50 < endX) {
              swipeRight();
            } else if (startX - 50 > endX) {
              swipeLeft();
            }
          });
        }
      }

      customElements.define("swipe-navigation", SwipeNavigation);
    </script>
  </body>
</html>
