---
import {cn} from "@/lib/utils";
import "../index.css";
import { ViewTransitions } from "astro:transitions";
import { pwaInfo } from "virtual:pwa-info";

const active = (href: string) => Astro.url.pathname === href;

const navigation = [
  { href: "/", label: "일지" },
  { href: "/budget", label: "예산" },
  { href: "/payment-methods", label: "결제수단" },
];
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="generator" content={Astro.generator} />
    <meta name="theme-color" content="#ffffff" />
    <title>가계부</title>
    {pwaInfo && <Fragment set:html={pwaInfo.webManifest.linkTag} />}
    <script src="/src/pwa.ts"></script>
    <ViewTransitions />
  </head>
  <body class="w-screen h-screen">
    <header
      class="h-[10vh] w-full fixed top-0"
    >
      <nav
        class="flex justify-around items-center h-full text-xl"
      >
        {
          navigation.map(({ href, label }) => (
            <a
              href={href}
              class={cn(
                "z-10",
                active(href) ? "border-teal-500 border-b-4 mt-1" :"border-b-0 mt-0",

              )}
            >
              {label}
            </a>
          ))
        }
      </nav>
    </header>
    <main transition:animate="slide" class="mt-[10vh]">
      <div id="toast-container" class="fixed top-4 right-4"></div>
      <swipe-navigation></swipe-navigation>
      <slot />
    </main>
  </body>
</html>

<script>
  import { navigate } from "astro:transitions/client";

  class SwipeNavigation extends HTMLElement {
    constructor() {
      super();

      const hrefs = ["/", "/budget", "/payment-methods"];

      function swipeRight() {
        if (window.location.pathname === hrefs[0]) return;

        const index = hrefs.indexOf(window.location.pathname);

        navigate(hrefs[index - 1]!);
      }

      function swipeLeft() {
        if (window.location.pathname === hrefs.at(-1)) return;

        const index = hrefs.indexOf(window.location.pathname);

        navigate(hrefs[index + 1]!);
      }

      const body = document.querySelector("body") as HTMLBodyElement;

      let startX = 0;

      body.addEventListener("touchstart", (event) => {
        if (event.touches[0] === undefined) return;

        startX = event.touches[0].clientX;
      });

      body.addEventListener("touchend", (event) => {
        if (event.changedTouches[0] === undefined) return;

        const endX = event.changedTouches[0].clientX;

        if (startX + 50 < endX) {
          swipeRight();
        } else if (startX - 50 > endX) {
          swipeLeft();
        }
      });
    }
  }

    customElements.define("swipe-navigation", SwipeNavigation);
  </script>
