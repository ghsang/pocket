---
import Table from "./_table.astro";
import FormOpenButton from "./_form-open-button.astro";
import AddTransactionForm from "./_add-transaction-form.astro";
import Layout from "./_layout.astro";
import { getPagedTransactions } from "lib/server";

const props = await getPagedTransactions({});
---

<Layout>
	<transaction-handler>
		<Table transactions={props.data} hasNext={props.hasNext} />
		<FormOpenButton />
		<AddTransactionForm />
	</transaction-handler>
</Layout>

<style>
	@keyframes tempBgColorChange {
		from {
			background-color: #d9f99d;
		}
	}
</style>

<script>
	import {
		type TransactionDao,
		type TransactionDto,
		createTransactionElement,
		toDate,
	} from "lib/client";

	class TransactionHandler extends HTMLElement {
		constructor() {
			super();

			const formOpenDiv = this.querySelector("div.form-open") as HTMLDivElement;

			const formOpenButton = this.querySelector(
				"button.form-open",
			) as HTMLButtonElement;

			const dialog = this.querySelector("dialog") as HTMLDialogElement;

			const form = this.querySelector("form") as HTMLFormElement;

			function getDateFromAnchorElement(a: HTMLAnchorElement) {
				const span = a.querySelector("span") as HTMLSpanElement;

				window.alert(`span.textContent: ${span.textContent}`);
				return toDate(span.textContent!);
			}

			function closeDialog() {
				setTimeout(() => {
					dialog.close();
					formOpenDiv.style.display = "flex";
				}, 100);
			}

			formOpenButton.addEventListener("click", () => {
				setTimeout(() => {
					formOpenDiv.style.display = "none";
					dialog.showModal();
				}, 100);
			});

			form.addEventListener("submit", async (event) => {
				event.preventDefault();

				const formData = new FormData(form);
				const tmp = Object.fromEntries(formData.entries());
				const data = { ...tmp, amount: Number(tmp.amount) } as TransactionDao;

				const table = this.querySelector(".table") as HTMLDivElement;
				const allRows = table.getElementsByTagName("a");

				const { id } = await fetch("/api/transactions.json", {
					method: "POST",
					headers: { "Content-Type": "application/json" },
					body: JSON.stringify(data),
				}).then((response) => response.json());

				const a = createTransactionElement({
					id,
					...data,
					date: data.date.toString(),
				} as TransactionDto);

				let inserted = false;

				for (const r of allRows) {
					const date = getDateFromAnchorElement(r);

					if (new Date(data.date) >= date) {
						table.insertBefore(a, r);

						inserted = true;

						break;
					}
				}

				if (!inserted) {
					table.appendChild(a);
				}

				closeDialog();

				a.scrollIntoView({
					block: "center",
					behavior: "instant",
				});
			});

			dialog.addEventListener("click", (event) => {
				if (event.target === dialog) {
					closeDialog();
				}
			});
		}
	}

	customElements.define("transaction-handler", TransactionHandler);
</script>
