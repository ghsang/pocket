---
import Table from "./_table.astro";
import FormOpenButton from "./_form-open-button.astro";
import AddTransactionForm from "./_add-transaction-form.astro";
import Layout from "./_layout.astro";
import { getPagedTransactions } from "lib/server";
import { getSession } from "auth-astro/server";
import {nanoid} from "nanoid";

const session = await getSession(Astro.request);

if (!session || session.user === undefined) {
	return Astro.redirect("/login");
}

const props = await getPagedTransactions({
	traceId: nanoid(),
	parentSpanId: '/pages/index',
	arguments_: {}
});
---

<Layout>
	<transaction-handler data-user={session.user.name}>
		<Table transactions={props.data} hasNext={props.hasNext} />
		<FormOpenButton />
		<AddTransactionForm user={session.user.name} />
	</transaction-handler>
</Layout>

<style>
	@keyframes tempBgColorChange {
		from {
			background-color: #d9f99d;
		}
	}
</style>

<script>
	import {
		type TransactionDao,
		type TransactionDto,
		createTransactionElement,
	} from "lib/client";
  import { nanoid } from "nanoid";

	class TransactionHandler extends HTMLElement {
		constructor() {
			super();

			const formOpenDiv = this.querySelector("div.form-open") as HTMLDivElement;

			if (formOpenDiv === null) {
				throw new Error("formOpenDiv not found");
			}

			const formOpenButton = this.querySelector(
				"button.form-open",
			) as HTMLButtonElement;

			if (formOpenButton === null) {
				throw new Error("formOpenButton not found");
			}

			const dialog = this.querySelector("dialog") as HTMLDialogElement;

			if (dialog === null) {
				throw new Error("dialog not found");
			}

			const form = this.querySelector("form") as HTMLFormElement;

			if (form === null) {
				throw new Error("form not found");
			}

			const template = this.querySelector("template") as HTMLTemplateElement;

			if (template === null) {
				throw new Error("template not found");
			}

			function getDateFromAnchorElement(a: HTMLAnchorElement) {
				const span = a.querySelector("span") as HTMLSpanElement;
				return new Date(span.dataset.date as string);
			}

			function closeDialog() {
				setTimeout(() => {
					dialog.close();
					formOpenDiv.style.display = "flex";
				}, 100);
			}

			formOpenButton.addEventListener("click", () => {
				setTimeout(() => {
					formOpenDiv.style.display = "none";
					dialog.showModal();
				}, 100);
			});

			form.addEventListener("submit", async (event) => {
				event.preventDefault();

				const formData = new FormData(form);
				const tmp = Object.fromEntries(formData.entries());
				const data = {
					...tmp,
					user: this.dataset!.user!,
					amount: Number(tmp.amount),
				} as TransactionDao;

				const table = this.querySelector(".table") as HTMLDivElement;
				const allRows = table.getElementsByTagName("a");

				const { id } = await fetch("/api/transactions.json", {
					method: "POST",
					headers: { 
						"Content-Type": "application/json",
						"X-B3-TraceId": nanoid(),
						"X-B3-ParentSpanId": "/pages/index/scroll",
					},
					body: JSON.stringify(data),
				}).then((response) => response.json());

				const a = createTransactionElement(template, {
					id,
					...data,
					date: data.date.toString(),
				} as TransactionDto);

				let inserted = false;

				for (const r of allRows) {
					const date = getDateFromAnchorElement(r);

					if (new Date(data.date) >= date) {
						table.insertBefore(a, r);

						inserted = true;

						break;
					}
				}

				if (!inserted) {
					table.appendChild(a);
				}

				form.reset();

				closeDialog();

				a.scrollIntoView({
					block: "center",
					behavior: "smooth",
				});
			});

			dialog.addEventListener("click", (event) => {
				if (event.target === dialog) {
					closeDialog();
				}
			});
		}
	}

	customElements.define("transaction-handler", TransactionHandler);
</script>
