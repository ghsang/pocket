---
import {cn} from "@/lib/utils";
import { type TransactionDto, toDateString } from "lib/client";

interface Props {
	transactions: TransactionDto[];
	startAfter: Date;
	hasNext: boolean;
}

const { transactions, startAfter, hasNext } = Astro.props;
---

<fetch-more hasNext={hasNext} startAfter={startAfter}>
	<template class="new">
		<a
			class="animate-new grid grid-cols-4 py-4 px-4 w-screen justify-between odd:bg-gray-100"
		>
			<span class="text-left"></span>
			<span class="col-span-2"></span>
			<span class="text-right"></span>
		</a>
	</template>
	<template class="old">
		<a class="grid grid-cols-4 py-4 px-4 w-screen justify-between odd:bg-gray-100">
			<span class="text-left"></span>
			<span class="col-span-2"></span>
			<span class="text-right"></span>
		</a>
	</template>
	<div class="text-center border-collapse border-spacing-0 w-screen h-[90vh] overflow-y-auto pb-4">
		<div class="table">
			{
				transactions.map((d, index) => (
						<a
						href={`/transactions/${d.id}`}
						class={cn(
							"grid grid-cols-4 py-4 px-4 w-screen justify-between odd:bg-gray-100",
							index === (transactions.length - 10) ? "loader" : "",
						)}
					>
						<span 
							class="text-left"
							data-date={d.date}
						>
							{toDateString(d.date)}
						</span>
						<span class="col-span-2">{d.description}</span>
						<span class="text-right">
							{d.amount.toLocaleString()}
						</span>
					</a>
				))
			}
		</div>
	</div>
</fetch-more>

<script>
	import { createTransactionElement, type TransactionDto } from "lib/client";
  import { nanoid } from "nanoid";

	async function fetchTransactions({ startAfter }: { startAfter: string }) {
		return (await fetch(
			`/api/paged-transactions/${startAfter}.json`, {
			headers: {
				"Content-Type": "application/json",
				"X-B3-TraceId": nanoid(),
				"X-B3-ParentSpanId": "/pages/index/fetch-more",
			},
		}).then(
			(response) => response.json(),
		)) as { data: TransactionDto[]; startAfter: string; hasNext: boolean };
	}

	class FetchMore extends HTMLElement {
		constructor() {
			super();

			let state = {
				startAfter: this.getAttribute("startAfter")!,
				hasNext: Boolean(this.getAttribute("hasNext")),
				initial: true,
			};

			const table = this.querySelector(".table");

			if (table === null) {
				throw new Error("table not found");
			}

			const template = this.querySelector<HTMLTemplateElement>("template.old")!;

			if (template === null) {
				throw new Error("template not found");
			}

			const observer = new IntersectionObserver(async (entries) => {
				if (entries[0]!.isIntersecting) {
					if (!state.hasNext) {
						observer.disconnect();
						return;
					}

					const { data, startAfter, hasNext } = await fetchTransactions({
						startAfter: state.startAfter,
					});

					for (const d of data) {
						const a = createTransactionElement(template, d);

						table!.append(a);
					}

					state = { startAfter, hasNext, initial: false };
				}
			});

			const loader = this.querySelector(".loader");

			observer.observe(loader!);
		}
	}

	customElements.define("fetch-more", FetchMore);
</script>
